@page "/"
@using ChatRoom.Models
@using MudBlazor
@inject IHttpClientFactory HttpClientFactory

<MudContainer>
    <i>
        <MudTextField @bind-Value="_messageToSend" Label="Сообщение вводить сюды" Style="background-color: antiquewhite"/>
    </i>
    <MudButton Style="background-color: #1b6ec2" OnClick="SendMessageAsync">Отправить</MudButton>
    <MudList T="Message">
        <MudText>Список сообщений чата:</MudText>
        <ul style="background-color: darkkhaki">
            @if (_messages != null)
            {
                foreach (var message in _messages)
                {
                    <li>
                        <MudListItem>Создано: @message.CreateTimestamp
                            @if (message.UpdatedTimeStamp != null)
                            {
                                <i>(Изменено: @message.UpdatedTimeStamp)</i>
                            }<br/>
                            Сообщение: @message.Text
                        </MudListItem>
                    </li>
                }
            }
        </ul>
    </MudList>
</MudContainer>

@code {
    private string _messageToSend = null!;
    private List<Message>? _messages = [];

    protected override async Task OnInitializedAsync()
    {
        await ListMessagesAsync();
    }

    private async Task ListMessagesAsync()
    {
        var client = HttpClientFactory.CreateClient("MessagesApi");
        _messages = await client.GetFromJsonAsync<List<Message>>("api/messages/");
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrEmpty(_messageToSend))
            return;

        var message = new Message(_messageToSend);
        var uri = $"api/messages/{Guid.NewGuid()}";
        var client = HttpClientFactory.CreateClient("MessagesApi");
        await client.PutAsJsonAsync(uri, message);
        _messageToSend = string.Empty;
        await ListMessagesAsync();
    }
}
